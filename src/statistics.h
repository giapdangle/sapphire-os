/* 
 * <license>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * This file is part of the Sapphire Operating System
 *
 * Copyright 2013 Sapphire Open Systems
 *
 * </license>
 */


#ifndef _STATISTICS_H
#define _STATISTICS_H


// statistics parameters:

enum{	
	STAT_RF_TX_INTERRUPTS,
	STAT_RF_RX_INTERRUPTS,
	STAT_RF_CCA_INTERRUPTS,
	STAT_RF_SENT,
	STAT_RF_RECEIVED,
	STAT_RF_TRANSMIT_REQUESTS,
	STAT_RF_RECEIVE_OVERRUNS,
	STAT_RF_ACK_SENT,

	STAT_MEM_ALLOCATIONS,
	STAT_MEM_FAILED_ALLOCATIONS,
	STAT_MEM_FREES,
	STAT_MEM_DEFRAGS,

	STAT_NETMSG_ICMP_CREATED,
	STAT_NETMSG_ICMP_RECEIVED,
	STAT_NETMSG_UDP_CREATED,
	STAT_NETMSG_UDP_RECEIVED,
	STAT_NETMSG_IPV4_CHECKSUMS_FAILED,
	STAT_NETMSG_IPV4_TTL_EXPIRED,
	STAT_NETMSG_CREATE_OBJECT_FAILED,
	STAT_NETMSG_OBJECT_CREATED,

	STAT_SOCKETS_PACKETS_DROPPED,

	STAT_UDP_CHECKSUM_FAILS,

	STAT_WCOM_IPV4_PACKETS_SENT,
	STAT_WCOM_IPV4_FRAGMENTS_SENT,
	STAT_WCOM_IPV4_PACKETS_RECEIVED,
	STAT_WCOM_IPV4_FRAGMENTS_RECEIVED,
	STAT_WCOM_IPV4_TX_FAILURES,
	STAT_WCOM_IPV4_RX_FAILURES,
	STAT_WCOM_IPV4_REPLY_CACHE_HITS,

	STAT_WCOM_MAC_DATA_FRAMES_SENT,
	STAT_WCOM_MAC_DATA_FRAMES_RECEIVED,
	STAT_WCOM_MAC_DATA_FRAMES_FAILED,
	STAT_WCOM_MAC_CCA_FAILS,
	STAT_WCOM_MAC_REPLAY_CACHE_HITS,
	STAT_WCOM_MAC_FRAME_RETRIES,

	STAT_FLASH_FS_ERASE_COUNT,
	STAT_FLASH_FS_WEAR_LEVELER_PASSES,
	STAT_FLASH_FS_GC_PASSES,
	STAT_FLASH_FS_BYTES_WRITTEN,
	STAT_FLASH_FS_BYTES_READ,
	STAT_FLASH_FS_SOFT_IO_ERRORS,
	STAT_FLASH_FS_HARD_IO_ERRORS,

	STAT_ROUTING_NEIGHBOR_HITS,
    STAT_ROUTING_RREQS_SENT,
    STAT_ROUTING_RREPS_SENT,
    STAT_ROUTING_RERRS_SENT,
    STAT_ROUTING_RREQS_RECEIVED,
    STAT_ROUTING_RREPS_RECEIVED,
    STAT_ROUTING_RERRS_RECEIVED,
    STAT_ROUTING_DISCOVERY_ATTEMPTS,
    STAT_ROUTING_DISCOVERY_ATTEMPTS_FAILED,


	STAT_DEBUG_0,
	STAT_DEBUG_1,
	STAT_DEBUG_2,
	STAT_DEBUG_3,

	STAT_COUNT
} stats_type_t;



void stats_v_init( void );
void stats_v_increment( uint8_t param );
void stats_v_set( uint8_t param, uint32_t value );
uint32_t stats_u32_read( uint8_t param );
const uint32_t *stats_u32p_get_all( void );


#endif


